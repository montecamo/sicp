; Turtle graphics stuff.

(define stk-xcor 0)
(define stk-ycor 0)
(define stk-heading 0)
(define pen-color 7)
(define bg-color 0)
; big win; STk understands X colors (rgb.txt names)!
(define color-makers '#((set-canvas-foreground-color "black")
				    (set-canvas-foreground-color "blue")
				    (set-canvas-foreground-color "green")
				    (set-canvas-foreground-color "cyan")
				    (set-canvas-foreground-color "red")
				    (set-canvas-foreground-color "magenta")
				    (set-canvas-foreground-color "yellow")
				    (set-canvas-foreground-color "white")))

(define bg-makers '#((canvas-widget 'configure :background "black")
		     (canvas-widget 'configure :background
				    "blue")
		     (canvas-widget 'configure :background
				    "green")
		     (canvas-widget 'configure :background
				    "cyan")
		     (canvas-widget 'configure :background
				    "red")
		     (canvas-widget 'configure :background
				    "magenta")
		     (canvas-widget 'configure :background
				    "yellow")
		     (canvas-widget 'configure :background
				    "white")))
(define (canvas-width) 480)
(define (canvas-height) 480)
(define (canvas-position) "+200+200")
(define (canvas-name) "Turtlegraphics")
(define canvas-toplevel-window #f) ; placeholder
(define canvas-widget #f) ; placeholder
(define (delete-canvas!)
      (destroy canvas-toplevel-window)
      (showing-canvas! #f))
(define (erase-canvas!)
      (canvas-widget 'delete 'all))
(define (create-canvas!)
      (set! canvas-toplevel-window (toplevel '.b))
      (set! canvas-widget (canvas '.b.canvas :width (canvas-width)
                         :height (canvas-height)
                         :background (canvas-background-color)))
      (pack canvas-widget)
      (wm 'geometry canvas-toplevel-window (canvas-position))
      (wm 'minsize canvas-toplevel-window (canvas-width) (canvas-height)) 
      (wm 'title canvas-toplevel-window (canvas-name))
      (wm 'iconname canvas-toplevel-window (canvas-name))
      (showing-canvas! #t))
(define *canvas-shown* #f)
(define (showing-canvas! arg)
  (set! *canvas-shown* arg))
(define (canvas-shown?)
  *canvas-shown*)
(define *canvas-foreground-color* "white")
(define (canvas-foreground-color)
  *canvas-foreground-color*)
(define (set-canvas-foreground-color new-color)
  (set! *canvas-foreground-color* new-color))
(define *canvas-background-color* "black")
(define (canvas-background-color)
  *canvas-background-color*)
(define (set-canvas-background-color new-color)
  (set! *canvas-background-color* new-color)
      (if (canvas-shown?)
        (canvas-widget 'configure :background (canvas-background-color))))
(define (turtle-translate-x oldx)
	(round (+ (/ (canvas-width) 2) oldx)))
(define (turtle-translate-y oldy)
	(round (+ (/ (canvas-height) 2) oldy)))
(define *drawing-turtle* #f)
(define (set-drawing-turtle! drawing-flag)
	(set! *drawing-turtle* drawing-flag))
(define (drawing-turtle?)
	*drawing-turtle*)
(define (canvas-really-draw-line! abs-fx abs-fy abs-tx abs-ty)
	(let ((line-id (canvas-widget 'create 'line abs-fx abs-fy abs-tx abs-ty
                     :fill (canvas-foreground-color))))
	  (if (drawing-turtle?)
	    (canvas-widget 'addtag "turtle" 'withtag line-id))))
(define (canvas-erase-turtle!)
	(canvas-widget 'delete "turtle"))
(define (canvas-draw-line! from-x from-y to-x to-y)
  (if (canvas-shown?)
        (let ((fx (turtle-translate-x from-x))
              (fy (turtle-translate-y from-y))
              (tx (turtle-translate-y to-x))
              (ty (turtle-translate-y to-y)))
          (canvas-really-draw-line! fx fy tx ty))))
(define (clearscreen)
          (if (canvas-shown?) (erase-canvas!) (create-canvas!))
	      (set! stk-xcor 0)
	      (set! stk-ycor 0)
	      (set! stk-heading 0)
	      (if turtle-shown (show-turtle #t)))
(define (internal-fd dist)
          (let ((new-xcor (+ stk-xcor (* dist (degree-sin stk-heading))))
                (new-ycor (- stk-ycor (* dist (degree-cos stk-heading)))))
            (if (pendown?)
              (canvas-draw-line! stk-xcor stk-ycor new-xcor new-ycor))
            (set! stk-xcor new-xcor)
            (set! stk-ycor new-ycor)))
(define (internal-rt turn)
	      (set! stk-heading (+ stk-heading turn))
	      (repeat-while (lambda () (< stk-heading 0))
		     (lambda () (set! stk-heading (+ stk-heading 360))))
	      (repeat-while (lambda () (>= stk-heading 360))
		     (lambda () (set! stk-heading (- stk-heading 360)))))
(define (repeat-while predicate thunk)
	      (if (predicate) (begin (thunk) (repeat-while predicate thunk))))
(define (degree-sin angle)
	      (sin (/ (* angle 3.141592654) 180)))
(define (degree-cos angle)
	      (cos (/ (* angle 3.141592654) 180)))
(define (internal-setxy new-xcor new-ycor)
            (if (pendown?)
              (canvas-draw-line! stk-xcor stk-ycor new-xcor (- new-ycor)))
            (set! stk-xcor new-xcor)
            (set! stk-ycor (- new-ycor)))
(define (internal-setheading newh)
	      (set! stk-heading newh)
	      (repeat-while (lambda () (< stk-heading 0))
		     (lambda () (set! stk-heading (+ stk-heading 360))))
	      (repeat-while (lambda () (>= stk-heading 360))
		     (lambda () (set! stk-heading (- stk-heading 360)))))
(define (xcor) stk-xcor)
(define (ycor) (- stk-ycor))
(define (heading) stk-heading)

(define turtle-shown #t)
(define (showturtle)
  (if (not turtle-shown) (show-turtle #t))
  (set! turtle-shown #t))
(define st showturtle)
(define (hideturtle)
  (if turtle-shown (show-turtle #f))
  (set! turtle-shown #f))
(define ht hideturtle)
(define (shown?) turtle-shown)

(define (forward dist)
  (if turtle-shown (show-turtle #f))
  (internal-fd dist)
  (if turtle-shown (show-turtle #t)))
(define (right angle)
  (if turtle-shown (show-turtle #f))
  (internal-rt angle)
  (if turtle-shown (show-turtle #t)))
(define (setxy newx newy)
  (if turtle-shown (show-turtle #f))
  (internal-setxy newx newy)
  (if turtle-shown (show-turtle #t)))
(define (setheading newh)
  (if turtle-shown (show-turtle #f))
  (internal-setheading newh)
  (if turtle-shown (show-turtle #t)))

(define (back dist)
  (forward (- dist)))
(define fd forward)
(define bk back)
(define (left turn)
  (right (- turn)))
(define lt left)
(define rt right)
(define (setx newx)
  (setxy newx (ycor)))
(define (sety newy)
  (setxy (xcor) newy))
(define pendown-flag #t)
(define penerase-flag #f)
(define (pendown?) pendown-flag)
(define (pendown)
  (set! pendown-flag #t)
  (set! penerase-flag #f)
  (set! true-pen-color pen-color)
  (eval (vector-ref color-makers true-pen-color)))
(define pd pendown)
(define (penup)
  (set! pendown-flag #f))
(define pu penup)
(define (home) (setxy 0 0))
(define cs clearscreen)
(define (pos) (list (xcor) (ycor)))
(define (setpencolor newc)
  (eval (vector-ref color-makers newc))
  (set! pen-color newc)
  (if turtle-shown (show-turtle #t))
  (if penerase-flag
      (eval (vector-ref color-makers bg-color))
      (set! true-pen-color newc)))
(define setpc setpencolor)
(define (setbackground newc)
  (eval (vector-ref bg-makers newc))
  (set! bg-color newc))
(define setbg setbackground)
(define (pencolor) pen-color)
(define pc pencolor)

(define true-pen-color pen-color)
(define (penerase)
  (set! true-pen-color bg-color)
  (set! pendown-flag #t)
  (set! penerase-flag #t)
  (eval (vector-ref color-makers true-pen-color)))
(define pe penerase)

(define turtle-base-angle (/ (* (acos (/ 1 3)) 180) 3.141592654))

(define (show-turtle show-flag)
	(define (st-draw-turtle)
		(let ((olderase penerase-flag) (olddown pendown-flag))
			(pendown)
			(set-drawing-turtle! #t)
			(internal-rt -90)
			(internal-fd 5)
			(internal-rt (- 180 turtle-base-angle))
			(internal-fd 15)
			(internal-rt (* 2 turtle-base-angle))
			(internal-fd 15)
			(internal-rt (- 180 turtle-base-angle))
			(internal-fd 5)
			(internal-rt 90)
			(set-drawing-turtle! #f)
			(if olddown (if olderase (penerase) (pendown)) (penup))))
	(if show-flag
		(st-draw-turtle)
		(canvas-erase-turtle!)))

(provide "turtle-grfx")
